name: Build and Deploy UnityOrbisBridge.prx

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout oosdk_libraries
      uses: actions/checkout@v3
      with:
        repository: bucanero/oosdk_libraries
        path: oosdk_libraries

    - name: Checkout libjbc
      uses: actions/checkout@v3
      with:
        repository: bucanero/ps4-libjbc
        path: ps4-libjbc

    - name: Set env vars
      run: echo "llvm_ver=12.0" >> $GITHUB_ENV

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: ./llvm
        key: llvm-${{ env.llvm_ver }}

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: ${{ env.llvm_ver }}
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - name: Download OpenOrbis Toolchain
      run: |
        echo "Downloading Latest OpenOrbis Toolchain..."

        # GitHub repository info
        GITHUB_OWNER="OpenOrbis"
        GITHUB_REPO="OpenOrbis-PS4-Toolchain"
        ARTIFACT_NAME="toolchain-llvm-12"
        GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"  # Use GitHub secret for token

        # Get the latest workflow run ID
        LATEST_RUN_URL="https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/actions/runs?per_page=1"
        LATEST_RUN_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$LATEST_RUN_URL" | jq -r '.workflow_runs[0].id')

        if [ -z "$LATEST_RUN_ID" ]; then
          echo "No workflow runs found."
          exit 1
        fi

        echo "Latest workflow run ID: $LATEST_RUN_ID"

        # Get the artifacts for the latest workflow run using the latest run ID
        ARTIFACTS_URL="https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/actions/runs/$LATEST_RUN_ID/artifacts"
        ARTIFACT_DOWNLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACTS_URL" | jq -r --arg ARTIFACT_NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name == $ARTIFACT_NAME) | .archive_download_url')

        if [ -z "$ARTIFACT_DOWNLOAD_URL" ]; then
          echo "No artifact named '$ARTIFACT_NAME' found in the latest workflow run."
          exit 1
        fi

        # Download the artifact
        RESPONSE=$(curl -L -o "$ARTIFACT_NAME.zip" -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACT_DOWNLOAD_URL" --write-out "%{http_code}")

        if [ "$RESPONSE" -ne 200 ]; then
          echo "Failed to download artifact. HTTP response code: $RESPONSE"
          exit 1
        fi

        echo "Downloaded '$ARTIFACT_NAME' as $ARTIFACT_NAME.zip"

        # Extract the downloaded ZIP file
        unzip -o "$ARTIFACT_NAME.zip"

        # Extract the corresponding TAR.GZ file if it exists
        TAR_FILE="$ARTIFACT_NAME.tar.gz"
        if [ -f "$TAR_FILE" ]; then
            tar -xzf "$TAR_FILE"
        else
            echo "No corresponding TAR.GZ file found."
        fi

        # Clean up the archives
        rm -f "$ARTIFACT_NAME.zip" "$TAR_FILE"
        echo "Cleaned up archives: '$ARTIFACT_NAME.zip' and '$TAR_FILE'."

        # Set the OO_PS4_TOOLCHAIN variable after downloading
        OO_PS4_TOOLCHAIN="${GITHUB_WORKSPACE}/OpenOrbis/PS4Toolchain"
        export OO_PS4_TOOLCHAIN
        echo "OO_PS4_TOOLCHAIN=${OO_PS4_TOOLCHAIN}" >> $GITHUB_ENV

    - name: Copy build_rules.mk
      run: |
        echo "Copying build_rules.mk to the toolchain directory..."
        cp ${GITHUB_WORKSPACE}/.github/workflows/build_rules.mk ${OO_PS4_TOOLCHAIN}/

    - name: Install zlib
      working-directory: oosdk_libraries/zlib_partial
      run: make install

    - name: Install polarssl
      working-directory: oosdk_libraries/polarssl-1.3.9
      run: make install

    - name: Install libjbc
      working-directory: ps4-libjbc
      run: make install

    - name: Install libcurl library
      working-directory: oosdk_libraries/curl-7.64.1
      run: |
        mkdir orbis && cd orbis
        wget https://raw.githubusercontent.com/bucanero/SDL-PS4/ps4/cmake/openorbis.cmake
        cmake --toolchain openorbis.cmake .. -DCMAKE_USE_POLARSSL=1 -DUSE_UNIX_SOCKETS=0 -DENABLE_THREADED_RESOLVER=0 -DENABLE_IPV6=0
        make libcurl
        cp lib/libcurl.a "${OO_PS4_TOOLCHAIN}/lib"
        cp -R ../include/curl "${OO_PS4_TOOLCHAIN}/include/"

    - name: Build Project
      run: |
        echo "Building UnityOrbisBridge..."
        cd source/plugin
        make
        echo "Build completed!"
        
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"

    - name: Commit and Push PRX to the repository
      run: |
        git add source/plugin/UnityOrbisBridge.prx
        git commit -m "Push UnityOrbisBridge.prx build artifact" || echo "No changes to commit"
        git push origin $GITHUB_REF
