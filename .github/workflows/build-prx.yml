name: Build and Deploy UnityOrbisBridge.prx

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Checkout oosdk_libraries
      uses: actions/checkout@v4
      with:
        repository: bucanero/oosdk_libraries
        path: oosdk_libraries

    - name: Checkout libjbc
      uses: actions/checkout@v4
      with:
        repository: bucanero/ps4-libjbc
        path: ps4-libjbc

    - name: Set Environment Variables
      run: |
        echo "Setting up environment variables"
        echo "llvm_ver=12.0" >> $GITHUB_ENV
        echo "OO_PS4_TOOLCHAIN=${{ github.workspace }}/OpenOrbis/PS4Toolchain" >> $GITHUB_ENV
      id: set-env-vars

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v4
      with:
        path: ./llvm
        key: llvm-${{ env.llvm_ver }}
        restore-keys: |
          llvm-

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: ${{ env.llvm_ver }}
        cached: ${{ steps.cache-llvm.outputs.cache-hit }}

    - name: Cache OpenOrbis Toolchain
      id: cache-toolchain
      uses: actions/cache@v4
      with:
        path: ./OpenOrbis/PS4Toolchain
        key: toolchain-${{ runner.os }}-${{ hashFiles('**/toolchain-llvm-12.tar.gz') }}
        restore-keys: |
          toolchain-${{ runner.os }}-

    - name: Download OpenOrbis Toolchain
      run: |
        if [ ! -d "$OO_PS4_TOOLCHAIN" ]; then
          echo "Downloading Latest OpenOrbis Toolchain..."
          GITHUB_OWNER="OpenOrbis"
          GITHUB_REPO="OpenOrbis-PS4-Toolchain"
          WORKFLOW_FILE="toolchain.yml"
          ARTIFACT_NAME="toolchain-llvm-12"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"

          LATEST_RUN_URL="https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/actions/workflows/$WORKFLOW_FILE/runs?per_page=1&status=completed"
          LATEST_RUN_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$LATEST_RUN_URL" | jq -r '.workflow_runs[0].id')

          if [ -z "$LATEST_RUN_ID" ]; then
            echo "No workflow runs found for $WORKFLOW_FILE."
            exit 1
          fi

          ARTIFACTS_URL="https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/actions/runs/$LATEST_RUN_ID/artifacts"
          ARTIFACT_DOWNLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACTS_URL" | jq -r --arg ARTIFACT_NAME "$ARTIFACT_NAME" '.artifacts[] | select(.name == $ARTIFACT_NAME) | .archive_download_url')

          if [ -z "$ARTIFACT_DOWNLOAD_URL" ]; then
            echo "No artifact named '$ARTIFACT_NAME' found in the latest workflow run."
            exit 1
          fi

          curl -L -o "$ARTIFACT_NAME.zip" -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACT_DOWNLOAD_URL"
          unzip -o "$ARTIFACT_NAME.zip"
          TAR_FILE="$ARTIFACT_NAME.tar.gz"
          [ -f "$TAR_FILE" ] && tar -xzf "$TAR_FILE"
          rm -f "$ARTIFACT_NAME.zip" "$TAR_FILE"
        else
          echo "OpenOrbis Toolchain found in cache, skipping download."
        fi

    - name: Copy build_rules.mk
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        echo "Copying build_rules.mk to the toolchain directory..."
        cp ${GITHUB_WORKSPACE}/.github/workflows/build_rules.mk ${OO_PS4_TOOLCHAIN}/

    - name: Install oosdk_libraries
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        echo "Installing libraries..."
        cd oosdk_libraries/zlib_partial
        make install

        cd ../polarssl-1.3.9
        make install

        cd ../../oosdk_libraries/curl-7.64.1
        mkdir -p orbis && cd orbis
        wget https://raw.githubusercontent.com/bucanero/SDL-PS4/ps4/cmake/openorbis.cmake
        cmake --toolchain openorbis.cmake .. -DCMAKE_USE_POLARSSL=1 -DUSE_UNIX_SOCKETS=0 -DENABLE_THREADED_RESOLVER=0 -DENABLE_IPV6=0
        make libcurl
        cp lib/libcurl.a "${OO_PS4_TOOLCHAIN}/lib"
        cp -R ../include/curl "${OO_PS4_TOOLCHAIN}/include/"

    - name: Install libjbc
      if: steps.cache-toolchain.outputs.cache-hit != 'true'
      run: |
        echo "Installing libjbc..."
        cd ps4-libjbc
        make install

    - name: Build Project
      run: |
        echo "Building UnityOrbisBridge..."
        cd source/plugin
        make
        echo "Build completed!"

    - name: Upload PRX as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: UnityOrbisBridge-PRX
        path: source/plugin/UnityOrbisBridge.prx

    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"

    - name: Commit and Push PRX to the repository
      run: |
        git add source/plugin/UnityOrbisBridge.prx
        git commit -m "Push UnityOrbisBridge.prx build artifact" || echo "No changes to commit"
        git push origin $GITHUB_REF
